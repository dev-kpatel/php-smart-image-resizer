diff --git a/src/Support/Srcset.php b/src/Support/Srcset.php
new file mode 100644
index 0000000..e69de29
--- /dev/null
+++ b/src/Support/Srcset.php
@@ -0,0 +40 @@
+<?php
+declare(strict_types=1);
+
+namespace App\Support;
+
+final class Srcset {
+  /**
+   * Build src/srcset/sizes for the /resize endpoint.
+   *
+   * @param string      $relativePath e.g. "products/shirt.jpg"
+   * @param array<int>  $widths       e.g. [320, 480, 640, 960, 1200, 1600]
+   * @param array       $params       e.g. ['fit'=>'cover','fmt'=>'webp','q'=>82,'engine'=>'gd','sizes'=>'100vw']
+   * @param string|null $baseUrl      absolute base like "https://media.example.com" (omit to use relative)
+   * @return array{{src:string, srcset:string, sizes:string}}
+   */
+  public static function generate(string $relativePath, array $widths, array $params = [], ?string $baseUrl = null): array {
+    $widths = array_values(array_unique(array_filter($widths, fn($w) => is_int($w) && $w > 0)));
+    sort($widths);
+    if (empty($widths)) $widths = [320, 480, 640, 960, 1200];
+
+    $qsBase = $params;
+    unset($qsBase['w'], $qsBase['sizes']); // width varies; sizes is an attribute, not a query param
+
+    $buildUrl = function(int $w) use ($relativePath, $qsBase, $baseUrl) {
+      $qs = array_merge($qsBase, ['w' => $w]);
+      $q  = http_build_query($qs);
+      $u  = '/resize/' . ltrim($relativePath, '/');
+      $url = $u . ($q ? ('?' . $q) : '');
+      return $baseUrl ? rtrim($baseUrl, '/') . $url : $url;
+    };
+
+    $srcsetParts = array_map(fn($w) => $buildUrl($w) . ' ' . $w . 'w', $widths);
+    $largest = end($widths);
+    $src = $buildUrl($largest);
+    $srcset = implode(', ', $srcsetParts);
+    $sizes = $params['sizes'] ?? '100vw';
+
+    return ['src' => $src, 'srcset' => $srcset, 'sizes' => $sizes];
+  }
+}
diff --git a/bin/clean b/bin/clean
new file mode 100755
index 0000000..e69de29
--- /dev/null
+++ b/bin/clean
@@ -0,0 +40 @@
+#!/usr/bin/env php
+<?php
+declare(strict_types=1);
+
+$opts = getopt('', ['days::', 'dir::', 'ext::', 'dry-run::', 'help::']);
+if (isset($opts['help'])) {
+  echo "Usage: bin/clean [--days=30] [--dir=public/resized] [--ext=jpg,webp,*] [--dry-run=1]\n";
+  exit(0);
+}
+
+$days   = isset($opts['days']) ? max(0, (int)$opts['days']) : 30;
+$dir    = $opts['dir'] ?? __DIR__ . '/../public/resized';
+$extArg = $opts['ext'] ?? '*';
+$dryRun = filter_var($opts['dry-run'] ?? false, FILTER_VALIDATE_BOOLEAN);
+
+if (!is_dir($dir)) {
+  fwrite(STDERR, "Directory not found: $dir\n");
+  exit(1);
+}
+
+$now = time();
+$threshold = $now - ($days * 86400);
+$exts = $extArg === '*' ? ['*'] : array_map('trim', explode(',', $extArg));
+
+$deleted = 0; $scanned = 0;
+foreach ($exts as $ext) {
+  $glob = rtrim($dir, '/').'/'.($ext === '*' ? '*' : "*.$ext");
+  foreach (glob($glob) as $file) {
+    if (!is_file($file)) continue;
+    $scanned++;
+    $mtime = filemtime($file) ?: 0;
+    if ($mtime <= $threshold) {
+      echo ($dryRun ? '[DRY] would delete ' : 'deleting ').$file.PHP_EOL;
+      if (!$dryRun) @unlink($file);
+      $deleted++;
+    }
+  }
+}
+
+echo json_encode(['dir'=>$dir,'days'=>$days,'dry_run'=>$dryRun,'scanned'=>$scanned,'deleted'=>$deleted], JSON_PRETTY_PRINT).PHP_EOL;
